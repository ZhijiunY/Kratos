// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: machine/v1/machine.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetMachine_GetMachine_FullMethodName = "/kt.api.helloworld.v1.GetMachine/GetMachine"
)

// GetMachineClient is the client API for GetMachine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetMachineClient interface {
	GetMachine(ctx context.Context, in *GetMachineReq, opts ...grpc.CallOption) (*GetMachineReply, error)
}

type getMachineClient struct {
	cc grpc.ClientConnInterface
}

func NewGetMachineClient(cc grpc.ClientConnInterface) GetMachineClient {
	return &getMachineClient{cc}
}

func (c *getMachineClient) GetMachine(ctx context.Context, in *GetMachineReq, opts ...grpc.CallOption) (*GetMachineReply, error) {
	out := new(GetMachineReply)
	err := c.cc.Invoke(ctx, GetMachine_GetMachine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetMachineServer is the server API for GetMachine service.
// All implementations must embed UnimplementedGetMachineServer
// for forward compatibility
type GetMachineServer interface {
	GetMachine(context.Context, *GetMachineReq) (*GetMachineReply, error)
	mustEmbedUnimplementedGetMachineServer()
}

// UnimplementedGetMachineServer must be embedded to have forward compatible implementations.
type UnimplementedGetMachineServer struct {
}

func (UnimplementedGetMachineServer) GetMachine(context.Context, *GetMachineReq) (*GetMachineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedGetMachineServer) mustEmbedUnimplementedGetMachineServer() {}

// UnsafeGetMachineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetMachineServer will
// result in compilation errors.
type UnsafeGetMachineServer interface {
	mustEmbedUnimplementedGetMachineServer()
}

func RegisterGetMachineServer(s grpc.ServiceRegistrar, srv GetMachineServer) {
	s.RegisterService(&GetMachine_ServiceDesc, srv)
}

func _GetMachine_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetMachineServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetMachine_GetMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetMachineServer).GetMachine(ctx, req.(*GetMachineReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GetMachine_ServiceDesc is the grpc.ServiceDesc for GetMachine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetMachine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kt.api.helloworld.v1.GetMachine",
	HandlerType: (*GetMachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachine",
			Handler:    _GetMachine_GetMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machine/v1/machine.proto",
}
